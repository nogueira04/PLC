Tornar um método concreto em abstrato é necessário quando a classe base não pode fornecer uma implementação sensata ou deseja forçar as subclasses a implementar um comportamento específico. Criar uma interface é ideal para compartilhar comportamentos entre classes não relacionadas, definir capacidades ou papéis, e suportar múltiplas heranças de comportamento, proporcionando mais flexibilidade. Classes abstratas são usadas quando há um relacionamento claro e para compartilhar código entre classes relacionadas, enquanto interfaces são usadas para definir contratos que qualquer classe pode implementar, independentemente da hierarquia.
